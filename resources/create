#!/bin/bash

# Erstellt einen neuen Server

source "$HOME/bin/_check" || { echo "error: $HOME/bin/_check not found or readable"; exit 1; }

BUILDTOOLSLINK="https://hub.spigotmc.org/jenkins/job/BuildTools/lastSuccessfulBuild/artifact/target/BuildTools.jar"

VERSION=""
PORT=""
WARNINGS=""
jarname=""

needscommand screen

[[ "$#" -lt 1 ]] && {
	echoerr "no servername given. Usage: create <servername>"
	exit 1
}

servername="$1"

[[ -d "$servername" ]] && {
	echoerr "server $servername already exists"
	exit 1
}

function compilespigot() {
	cd "$HOME/BuildTools" || { echoerr "directory $HOME/BuildTools not found"; exit 1; }
	wget -O BuildTools.jar "$BUILDTOOLSLINK"
	java -jar "$HOME/BuildTools/BuildTools.jar" --rev $VERSION
	cd "$MCPATH"
	if [[ "$?" != 0 ]] || [[ ! -f "$HOME/BuildTools/spigot-$VERSION.jar" ]]
	then
		echoerr "Could not compile or locate Spigot version $VERSION"
		exit 1
	fi
}


echo "=== Creating server $servername ==="
mkdir $servername
echo "To create the server, we need a minecraft server binary. You have two options:"
echo
echo "1. You can put your own jar-file at $MCPATH/$1"
echo "2. We can automatically compile and install Spigot (www.spigotmc.org)."
echo
answer=""
while [[ ! "$answer" =~ [oO] ]] && [[ ! "$answer" =~ [cC] ]]; do
	read -p "Please choose: [o]wn jar-file or [c]ompile Spigot: " answer
done
if [[ "$answer" =~ [oO] ]]; then
	echo
	echo "Please put your jar-file in the server's directory at $MCPATH/$1/"
	read -n 1 -s -r -p "Press any key to continue when you are finished..."
	while [[ "$(ls -1 "$MCPATH/$1" | grep .jar$ | wc -l)" -eq 0 ]]; do
		echo
		echoerr "could not find your jar-file at $MCPATH/$1"
		echo "Please put your jar-file in the server's directory at $MCPATH/$1/"
		read -n 1 -s -r -p "Press any key to continue when you are finished..."
	done
	if [[ "$(ls -1 "$MCPATH/$1" | grep .jar$ | wc -l)" -eq 1 ]]; then
		jarname="$(ls -1 "$MCPATH/$1" | grep .jar$ )"
		echo "jar-file found: $jarname"
	else
		while [[ -z "$jarname" ]] || [[ ! -f "$jarname" ]]; do
			if [[ ! -z "$jarname" ]]; then
				echoerr "jar-file $jarname not found at $MCPATH/$1"
				echo
			fi
			echo "Warning: We found more than one jar-file at $MCPATH/$1:"
			ls -1 "$MCPATH/$1" | grep .jar$
			read -p "Please enter the name of the jar-file you want to use:" jarname
		done
	fi	
fi
elif [[ "$answer" =~ [cC] ]]; then
read -p "Spigot version [e.g. 1.12.2]: " VERSION

# Testen ob Version bereits kompiliert wurde
if [[ ! -f "$HOME/BuildTools/spigot-$VERSION.jar" ]]
then
	echo "Spigot version $VERSION has not been compiled yet, starting BuildTools..."
	compilespigot
else
	echo "Spigot version $VERSION has already been compiled, but we don't know if there is a new version."
	read -p "Recompile Spigot version $VERSION? If you choose no, we will use the existing version. [y/n]: " yesno
	if [[ "$yesno" =~ ^[Yy]$ ]]; then
		echo "Recompiling Spigot version $VERSION, starting BuildTools..."
		compilespigot
	else
		echo "Using existing Spigot version $VERSION"
	fi
fi

cp "$HOME/BuildTools/spigot-$VERSION.jar" "$servername"/
echo "Spigot version $VERSION has been installed to $MCPATH/$servername/spigot-$VERSION.jar"

else
	echoerr "could not understand: $answer"
fi
echo
echo -n "Starting server to generate eula.txt..."
"$HOME/bin/start" $servername >/dev/null

while [[ ! -f "$MCPATH/$servername/eula.txt" ]]
do
	echo -n "."
	sleep 1
done
echo

echo "eula.txt found!"
"$HOME/bin/stop" $servername 2>/dev/null

#while "$HOME/bin/status" $servername &> /dev/null
#do
#	echo -n "."
#	sleep 1
#done
#echo

echo "Patching eula.txt"
sed -i 's/eula=false/eula=true/g' "$MCPATH/$servername/eula.txt"
echo "Deleting server.properties"
rm -f "$MCPATH/$servername/server.properties"
echo
echo -n "Starting server to generate server.properties..."
"$HOME/bin/start" $servername > /dev/null

while [[ ! -f "$MCPATH/$servername/server.properties" ]]
do
        echo -n "."
        sleep 1
done
echo

echo "server.properties found!"
"$HOME/bin/stop" $servername 

echo "generating default jeffmc-server.conf file"
cp "$HOME/resources/jeffmc-server.conf.example" "$MCPATH/$servername/jeffmc-server.conf"

echo
echo "=== Basic configuration ==="

PORTOK=no
while [[ "$PORTOK" == "no" ]]; do
	PORTCONFLICT=no
	read -p "Server port [25565]: " PORT
	[[ -z "$PORT" ]] && PORT=25565
	# Überprüfen, ob zwei Server den gleichen Port nutzen
	for server in *; do
		if [[ "$server" != "$servername" ]] && [[ -d "$server" ]]; then
			if [[ "$(getport $server)" -eq "$PORT" ]]; then
				PORTCONFLICT=yes
				echo "warning: server $server is already using port $PORT"
				echo
				echo "When you have two servers running on the same port, they cannot run at the same time."
				read -p "Do you want to [c]ontinue, change the [p]ort or [a]bort? [c/p/a]: " -n 1 -r tmpanswer
				echo
					if [[ "$tmpanswer" =~ ^[Aa]$ ]]; then
						echo "aborting..."
						yes | "$HOME/bin/rmserver" $servername
						exit 1
					elif [[ "$tmpanswer" =~ ^[Pp]$ ]]; then
						continue;
					elif [[ "$tmpanswer" =~ ^[Cc]$ ]]; then
						PORTOK=yes
					else
						echoerr "could not understand. Aborting..."
						exit 1
					fi
			else
				echodeb 4 "Port von $server ($(getport $server)) und $servername ($PORT) kollidieren nicht."
			fi
		fi
	done
	if [[ "$PORTCONFLICT" == "no" ]]; then
		PORTOK=yes
	fi
done
sed -i "s/server-port=25565/server-port=$PORT/g" "$MCPATH/$servername/server.properties"

read -p "Gamemode (0=Survival, 1=Creative, 2=Adventure) [0]: " GAMEMODE
[[ -z "$GAMEMODE" ]] && GAMEMODE=0
sed -i "s/gamemode=0/gamemode=$GAMEMODE/g" "$MCPATH/$servername/server.properties"

read -p "Difficulty (0=Peaceful, 1=Easy, 2=Normal, 3=Hard) [1]: " DIFFICULTY
[[ -z "$DIFFICULTY" ]] && DIFFICULTY=1
sed -i "s/difficulty=1/difficulty=$DIFFICULTY/g" "$MCPATH/$servername/server.properties"

read -p "Max. players [20]: " MAXPLAYERS
[[ -z "$MAXPLAYERS" ]] && MAXPLAYERS=20
sed -i "s/max-players=20/max-players=$MAXPLAYERS/g" "$MCPATH/$servername/server.properties"

echo
echo "=== Server created ==="
echo "Server $servername created at $MCPATH/$servername/"
echo
echo "Notes:"
echo "- When using a firewall, be sure to enable connections on port $PORT."
echo "- The server has not been started. You can do so with 'start $servername'"

